# name: test/sql/snowflake_data_types.test
# description: Data type conversion and edge case tests for Snowflake ATTACH functionality
# group: [sql]

require snowflake

# Require environment variables to be set
require-env SNOWFLAKE_ACCOUNT

require-env SNOWFLAKE_USERNAME

require-env SNOWFLAKE_PASSWORD

require-env SNOWFLAKE_DATABASE

# Test 1: ATTACH with READ_ONLY flag
statement ok
ATTACH 'account=${SNOWFLAKE_ACCOUNT};user=${SNOWFLAKE_USERNAME};password=${SNOWFLAKE_PASSWORD};warehouse=COMPUTE_WH;database=${SNOWFLAKE_DATABASE}' AS sf_db (TYPE SNOWFLAKE, READ_ONLY);

# Test 2: Basic data type conversion - INTEGER to VARCHAR
query TT
SELECT c_custkey, CAST(c_custkey AS VARCHAR) as custkey_str
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1
2	2
3	3

# Test 3: Basic data type conversion - VARCHAR to INTEGER
query TT
SELECT c_name, CAST(SUBSTRING(c_name, 10) AS INTEGER) as custkey_from_name
FROM sf_db.tpch_sf1.customer
WHERE c_custkey <= 3
ORDER BY c_custkey;
----
Customer#000000001	1
Customer#000000002	2
Customer#000000003	3

# Test 4: Basic data type conversion - DOUBLE to BIGINT
query TT
SELECT c_acctbal, CAST(c_acctbal AS BIGINT) as balance_bigint
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
711.56	712
121.65	122
7498.12	7498

# Test 5: Basic data type conversion - INTEGER to DOUBLE
query TT
SELECT c_custkey, CAST(c_custkey AS DOUBLE) as custkey_double
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1.0
2	2.0
3	3.0

# Test 6: String to numeric conversion with SUBSTRING
query TTI
SELECT c_name,
       SUBSTRING(c_name, 10, 9) as custkey_part,
       CAST(SUBSTRING(c_name, 10, 9) AS INTEGER) as custkey_int
FROM sf_db.tpch_sf1.customer
WHERE c_custkey <= 3
ORDER BY c_custkey;
----
Customer#000000001	000000001	1
Customer#000000002	000000002	2
Customer#000000003	000000003	3

# Test 7: Numeric to string conversion with concatenation
query TT
SELECT c_custkey,
       'Customer#' || LPAD(CAST(c_custkey AS VARCHAR), 8, '0') as formatted_name
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	Customer#00000001
2	Customer#00000002
3	Customer#00000003

# Test 8: Complex type conversion in aggregations
query IIII
SELECT c_nationkey,
       COUNT(c_custkey) as customer_count,
       CAST(AVG(c_acctbal) AS BIGINT) as avg_balance_bigint,
       CAST(SUM(c_acctbal) AS DOUBLE) as total_balance_double
FROM sf_db.tpch_sf1.customer
GROUP BY c_nationkey
ORDER BY c_nationkey
LIMIT 3;
----
0	5925	4443	26322970.1
1	5975	4485	26797875.68
2	5999	4471	26821675.78

# Test 9: Type conversion in WHERE clauses
query I
SELECT COUNT(c_custkey) as high_balance_customers
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_acctbal AS INTEGER) > 5000;
----
67982

# Test 10: Type conversion in JOIN conditions
query II
SELECT c.c_custkey, o.o_orderkey
FROM sf_db.tpch_sf1.customer c
JOIN sf_db.tpch_sf1.orders o ON CAST(c.c_custkey AS VARCHAR) = CAST(o.o_custkey AS VARCHAR)
ORDER BY c.c_custkey, o.o_orderkey
LIMIT 3;
----
1	454791
1	579908
1	3868359

# Test 11: Type conversion in ORDER BY
query TT
SELECT c_custkey, c_name
FROM sf_db.tpch_sf1.customer
ORDER BY CAST(SUBSTRING(c_name, 10) AS INTEGER)
LIMIT 3;
----
1	Customer#000000001
2	Customer#000000002
3	Customer#000000003

# Test 12: Type conversion in GROUP BY
query TT
SELECT CAST(c_nationkey AS VARCHAR) as nation_str,
       COUNT(c_custkey) as customer_count
FROM sf_db.tpch_sf1.customer
GROUP BY CAST(c_nationkey AS VARCHAR)
ORDER BY nation_str
LIMIT 3;
----
0	5925
1	5975
10	6009

# Test 13: Type conversion in HAVING clauses
query II
SELECT c_nationkey,
       COUNT(c_custkey) as customer_count
FROM sf_db.tpch_sf1.customer
GROUP BY c_nationkey
HAVING CAST(COUNT(c_custkey) AS VARCHAR) > '1500'
ORDER BY c_nationkey
LIMIT 3;
----
0	5925
1	5975
2	5999

# Test 14: Type conversion in subqueries
query TT
SELECT c_custkey, c_name
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_custkey AS DOUBLE) IN (
    SELECT CAST(o_orderkey AS DOUBLE) 
    FROM sf_db.tpch_sf1.orders 
    WHERE o_orderkey <= 3
)
ORDER BY c_custkey
LIMIT 3;
----
1	Customer#000000001
2	Customer#000000002
3	Customer#000000003

# Test 15: Type conversion in CASE statements
query TT
SELECT c_custkey,
       CASE 
           WHEN CAST(c_acctbal AS INTEGER) < 1000 THEN 'Low'
           WHEN CAST(c_acctbal AS INTEGER) < 5000 THEN 'Medium'
           ELSE 'High'
       END as balance_category
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 5;
----
1	Low
2	Low
3	High
4	Medium
5	Low

# Test 16: Type conversion in window functions
query III
SELECT c_custkey,
       c_acctbal,
       ROW_NUMBER() OVER (ORDER BY CAST(c_acctbal AS DOUBLE), c_custkey) as row_num_balance
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	711.56	23223
2	121.65	15352
3	7498.12	115900

# Test 17: Type conversion in string functions
query III
SELECT c_name,
       LENGTH(CAST(c_custkey AS VARCHAR)) as custkey_length,
       UPPER(CAST(c_custkey AS VARCHAR)) as custkey_upper
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
Customer#000000001	1	1
Customer#000000002	1	2
Customer#000000003	1	3

# Test 18: Type conversion in mathematical functions
query III
SELECT c_acctbal,
       ABS(CAST(c_acctbal AS DOUBLE)) as abs_balance,
       ROUND(CAST(c_acctbal AS DOUBLE), 1) as rounded_balance
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
711.56	711.56	711.6
121.65	121.65	121.7
7498.12	7498.12	7498.1

# Test 19: Type conversion in string concatenation
query TT
SELECT c_custkey,
       'Customer #' || CAST(c_custkey AS VARCHAR) as customer_label
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	Customer #1
2	Customer #2
3	Customer #3

# Test 20: Type conversion in numeric operations
query III
SELECT c_custkey,
       CAST(c_custkey AS DOUBLE) * 1.5 as custkey_times_1_5,
       CAST(c_custkey AS DOUBLE) / 2.0 as custkey_divided_by_2
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1.5	0.5
2	3.0	1.0
3	4.5	1.5

# Test 21: Type conversion in comparison operations
query I
SELECT COUNT(c_custkey) as customers_with_high_id
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_custkey AS DOUBLE) > 25000.0;
----
125000

# Test 22: Type conversion in IN clauses
query I
SELECT COUNT(c_custkey) as customers_in_first_five
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_custkey AS VARCHAR) IN ('1', '2', '3', '4', '5');
----
5

# Test 23: Type conversion in BETWEEN clauses
query I
SELECT COUNT(c_custkey) as customers_between_1_and_100
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_custkey AS DOUBLE) BETWEEN 1.0 AND 100.0;
----
100

# Test 24: Type conversion in NULL handling
query I
SELECT COUNT(c_custkey) as customers_with_valid_data
FROM sf_db.tpch_sf1.customer
WHERE CAST(c_custkey AS VARCHAR) IS NOT NULL;
----
150000

# Test 25: Type conversion in COALESCE
query TT
SELECT c_custkey,
       COALESCE(CAST(c_custkey AS VARCHAR), 'Unknown') as custkey_or_unknown
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1
2	2
3	3

# Test 26: Type conversion in NULLIF
query TT
SELECT c_custkey,
       NULLIF(CAST(c_custkey AS VARCHAR), '999999') as custkey_unless_999999
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1
2	2
3	3

# Test 27: Complex type conversion with multiple operations
query IIII
SELECT c_custkey,
       CAST(c_custkey AS VARCHAR) as custkey_str,
       LENGTH(CAST(c_custkey AS VARCHAR)) as str_length,
       CAST(LENGTH(CAST(c_custkey AS VARCHAR)) AS DOUBLE) as length_double
FROM sf_db.tpch_sf1.customer
ORDER BY c_custkey
LIMIT 3;
----
1	1	1	1.0
2	2	1	1.0
3	3	1	1.0

# Test 28: Type conversion in window functions with PARTITION BY
query III
SELECT c_nationkey,
       c_custkey,
       ROW_NUMBER() OVER (PARTITION BY CAST(c_nationkey AS VARCHAR) ORDER BY CAST(c_custkey AS DOUBLE)) as row_num
FROM sf_db.tpch_sf1.customer
ORDER BY c_nationkey, c_custkey
LIMIT 6;
----
0	29	1
0	48	2
0	73	3
0	76	4
0	80	5
0	86	6

# Test 29: Type conversion in string concatenation in aggregations
query III
SELECT c_nationkey,
       'Nation ' || CAST(c_nationkey AS VARCHAR) as nation_label,
       COUNT(c_custkey) as customer_count
FROM sf_db.tpch_sf1.customer
GROUP BY c_nationkey
ORDER BY c_nationkey
LIMIT 3;
----
0	Nation 0	5925
1	Nation 1	5975
2	Nation 2	5999

# Test 30: Final verification
query I
SELECT COUNT(c_custkey) as final_verification FROM sf_db.tpch_sf1.customer;
----
150000

# Test 31: Cleanup
statement ok
DETACH sf_db;
